<UserControl x:Class="Eos.Usercontrols.AlignmentMatrix"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Eos.Usercontrols"
             xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
             xmlns:types="clr-namespace:Eos.Types"
             x:Name="ucAlignmentMatrix"
             mc:Ignorable="d" 
             d:DesignHeight="120" d:DesignWidth="400">
    <UserControl.Resources>
        <local:AlignmentToBoolConverter x:Key="alignmentToBoolConverter"/>

        <ControlTemplate x:Key="alignmentCheckbox">
            <Border Margin="1" BorderThickness="1" BorderBrush="SlateGray">
                <Border.InputBindings>
                    <MouseBinding MouseAction="LeftClick" Command="{Binding ElementName=ucAlignmentMatrix, Path=ToggleAlignmentCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Tag}"/>
                </Border.InputBindings>
                <Border.Style>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="Background" Value="White"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsEnabled}" Value="True"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsChecked}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                
                                <Setter Property="Background" Value="LightGreen"/>
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsEnabled}" Value="True"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsChecked}" Value="False"/>
                                </MultiDataTrigger.Conditions>

                                <Setter Property="Background" Value="LightCoral"/>
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsEnabled}" Value="False"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsChecked}" Value="True"/>
                                </MultiDataTrigger.Conditions>

                                <Setter Property="Background" Value="LightGray"/>
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsEnabled}" Value="False"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsChecked}" Value="False"/>
                                </MultiDataTrigger.Conditions>

                                <Setter Property="Background" Value="DarkGray"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>

                <TextBlock Margin="5" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" FontWeight="Bold" TextAlignment="Center"/>
            </Border>
        </ControlTemplate>

        <Style TargetType="{x:Type ToggleButton}">
            <Setter Property="Template" Value="{StaticResource alignmentCheckbox}"/>
        </Style>
    </UserControl.Resources>

    <Viewbox StretchDirection="Both" Stretch="Uniform">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            
            <ToggleButton Grid.Row="0" Grid.Column="0" Content="Lawful Good" Tag="{x:Static types:Alignment.LawfulGood}"
                     IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.LawfulGood}}"/>
            <ToggleButton Grid.Row="0" Grid.Column="1" Content="Neutral Good" Tag="{x:Static types:Alignment.NeutralGood}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.NeutralGood}}"/>
            <ToggleButton Grid.Row="0" Grid.Column="2" Content="Chaotic Good" Tag="{x:Static types:Alignment.ChaoticGood}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.ChaoticGood}}"/>

            <ToggleButton Grid.Row="1" Grid.Column="0" Content="Lawful Neutral" Tag="{x:Static types:Alignment.LawfulNeutral}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.LawfulNeutral}}"/>
            <ToggleButton Grid.Row="1" Grid.Column="1" Content="Neutral" Tag="{x:Static types:Alignment.Neutral}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.Neutral}}"/>
            <ToggleButton Grid.Row="1" Grid.Column="2" Content="Chaotic Neutral" Tag="{x:Static types:Alignment.ChaoticNeutral}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.ChaoticNeutral}}"/>

            <ToggleButton Grid.Row="2" Grid.Column="0" Content="Lawful Evil" Tag="{x:Static types:Alignment.LawfulEvil}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.LawfulEvil}}"/>
            <ToggleButton Grid.Row="2" Grid.Column="1" Content="Neutral Evil" Tag="{x:Static types:Alignment.NeutralEvil}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.NeutralEvil}}"/>
            <ToggleButton Grid.Row="2" Grid.Column="2" Content="Chaotic Evil" Tag="{x:Static types:Alignment.ChaoticEvil}"
                      IsChecked="{Binding ElementName=ucAlignmentMatrix, Path=Alignment, Mode=OneWay, Converter={StaticResource alignmentToBoolConverter}, ConverterParameter={x:Static types:Alignment.ChaoticEvil}}"/>
        </Grid>
    </Viewbox>
</UserControl>
